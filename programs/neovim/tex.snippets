global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'

endglobal

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet ali "Align" bA
\begin{align*}
	$1
\end{align*} $0
endsnippet

snippet gat "Gather" bA
\begin{gather*}
	$1
\end{gather*} $0
endsnippet

snippet sec "section{}" bA
\section*{$1}$0
endsnippet

snippet ssec "subsection{}" bA
\subsection*{$1}$0
endsnippet

snippet sssec "subsubsection{}" bA
\subsubsection*{$1}$0
endsnippet

snippet == "aligned equals" iA
&=
endsnippet

snippet != "not equal" iA
\neq
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "^{}" iA
^{$1}$0
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet oo "\infty" iA
\infty
endsnippet

snippet <= "leq" iA
\leq
endsnippet

snippet >= "geq" iA
\geq
endsnippet

snippet << "much less" iA
\ll
endsnippet

snippet >> "much greater" iA
\gg
endsnippet

snippet -> "to" iA
\to
endsnippet

snippet => "implies" iA
\implies
endsnippet

snippet iff "iff" iA
\iff
endsnippet

priority 10
context "math()"
snippet lr "left(right)" iA
\left($1\right)$0
endsnippet

priority 100
context "math()"
snippet blr "left[right]" iA
\left[$1\right]$0
endsnippet

context "math()"
snippet hbar "hbar" iA
\hbar
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "dot" "dot" riA
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-bd-zA-Z])dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 1000
context "math()"
snippet cdot "cdot" iA
\cdot
endsnippet

snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

priority 10
snippet ... "line dots" iA
\ldots
endsnippet

priority 100
snippet h... "horizontal dots" iA
\cdots
endsnippet

priority 100
snippet v... "vertical dots" iA
\vdots
endsnippet

priority 100
snippet d... "diagonal dots" iA
\ldots
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

context "math()"
snippet cnn "cn" iA
c_{n}
endsnippet

context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet cii "ci" iA
c_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet cjj "cj" iA
c_{j}
endsnippet

context "math()"
snippet lim "limit" wA
\lim_{$1 \to $2}$0
endsnippet

context "math()"
snippet '\w*(?<!(\\|s))sum' "sum" wrA
\sum_{$1 = $2}^{$3}$0
endsnippet

context "math()"
snippet prod "product" wA
\prod_{$1 = $2}^{$3}$0
endsnippet

context "math()"
snippet '\w*(?<!(\\|s))int' "Integral" wrA
\int_{$1}^{$2}$0
endsnippet
