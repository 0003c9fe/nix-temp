global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet ali "Align" bA
\begin{align*}
	$1
\end{align*} $0
endsnippet

snippet gat "Gather" bA
\begin{gather*}
	$1
\end{gather*} $0
endsnippet

snippet sec "section{}" bA
\section*{$1}$0
endsnippet

snippet ssec "subsection{}" bA
\subsection*{$1}$0
endsnippet

snippet sssec "subsubsection{}" bA
\subsubsection*{$1}$0
endsnippet

snippet == "&=" iA
&=
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet lim "limit" wA
\lim_{$1 \to $2}$0
endsnippet

context "math()"
snippet '\w*(?<!(\\|s))sum' "sum" wrA
\sum_{$1 = $2}^{$3}$0
endsnippet

context "math()"
snippet prod "product" wA
\prod_{$1 = $2}^{$3}$0
endsnippet

context "math()"
snippet '\w*(?<!(\\|s))int' "Integral" wrA
\int_{$1}^{$2}$0
endsnippet

context "math()"
snippet iint "Double integral" wA
\iint_{$1}$0
endsnippet

context "math()"
snippet iiint "Triple integral" wA
\iiint_{$1}$0
endsnippet

context "math()"
snippet oint "Closed loop integral" wA
\oint_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet <= "leq" iA
\leq
endsnippet

snippet >= "geq" iA
\geq
endsnippet

snippet << "much less" iA
\ll
endsnippet

snippet >> "much greater" iA
\gg
endsnippet

snippet -> "to" iA
\to
endsnippet

snippet => "implies" iA
\implies
endsnippet

priority 10
context "math()"
snippet lr "left(right)" iA
\left($1\right)$0
endsnippet


priority 100
context "math()"
snippet blr "left[right]" iA
\left[$1\right]$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "dot" "dot" riA
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-bd-zA-Z])dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet
priority 1000
context "math()"
snippet \cdot "cdot" iA
\cdot
endsnippet
